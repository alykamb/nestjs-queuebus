import { Channel, Connection, ConsumeMessage, Replies } from 'amqplib'

/**
 * Creates an a new queue with an autogenerated name. Normally used to receive answers
 *
 * @param prop - channel to create Queue
 * @param callback - callback that runs each time a message is received
 * @param onAssertCallback -  callback that runs when the queue is asserted
 * @param noAck - if it should enable or disable ack. Default is false
 */
export function consumePrivateQueue(
    channel: Channel,
    callback: (message: ConsumeMessage, queue: Replies.AssertQueue) => void,
    onAssertCallback?: (queue: Replies.AssertQueue) => void,
    noAck?: boolean,
): void

/**
 * Creates an a new queue with an autogenerated name. Normally used to receive answers
 *
 * @param prop - connection used to create and channel and Queue
 * @param callback - callback that runs each time a message is received
 * @param onAssertCallback -  callback that runs when the queue is asserted
 * @param noAck - if it should enable or disable ack. Default is false
 */
export function consumePrivateQueue(
    connection: Connection,
    callback: (message: ConsumeMessage, queue: Replies.AssertQueue) => void,
    onAssertCallback?: (queue: Replies.AssertQueue) => void,
    noAck?: boolean,
): void

/**
 * Creates an a new queue with an autogenerated name. Normally used to receive answers
 *
 * @param prop - channel or connection
 * @param callback - callback that runs each time a message is received
 * @param onAssertCallback -  callback that runs when the queue is asserted
 * @param noAck - if it should enable or disable ack. Default is false
 */
export function consumePrivateQueue(
    channelOrConnection: Channel | Connection,
    callback: (message: ConsumeMessage, queue: Replies.AssertQueue) => void,
    onAssertCallback?: (queue: Replies.AssertQueue) => void,
    noAck = true,
): void {
    let getChannel: Promise<Channel> = Promise.resolve(channelOrConnection as Channel)
    if ((channelOrConnection as Connection).connection) {
        getChannel = (channelOrConnection as Connection).createChannel()
    }

    void getChannel.then((channel) => {
        return channel.assertQueue('', { exclusive: true }).then((queue) => {
            void channel.consume(queue.queue, (message) => callback(message, queue), { noAck })

            onAssertCallback && onAssertCallback(queue)
        })
    })
}
